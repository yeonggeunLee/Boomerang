plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'kr.ai.boomerang'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// Spring Boot Starters
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	// OAuth2 Client
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	// JWT
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// Database
	runtimeOnly 'com.mysql:mysql-connector-j'
	// 개발 시 H2 사용 가능
	runtimeOnly 'com.h2database:h2'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Jackson for JSON processing
	implementation 'com.fasterxml.jackson.core:jackson-databind'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.core:jackson-annotations'

	// Apache Commons
	implementation 'org.apache.commons:commons-lang3:3.12.0'

	// Test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'io.projectreactor:reactor-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Test - JWT Testing
	testImplementation 'io.jsonwebtoken:jjwt-api'
	testRuntimeOnly 'io.jsonwebtoken:jjwt-impl'
	testRuntimeOnly 'io.jsonwebtoken:jjwt-jackson'

}

tasks.named('test') {
	useJUnitPlatform()
	// 테스트 시 JVM 옵션 설정
	jvmArgs = [
			'--add-opens=java.base/java.lang=ALL-UNNAMED',
			'--add-opens=java.base/java.util=ALL-UNNAMED'
	]
}

// JAR 생성 설정
jar {
	enabled = false
	archiveClassifier = ''
}

// 실행 가능한 JAR 생성 설정
bootJar {
	enabled = true
	archiveClassifier = ''
	mainClass = 'kr.ai.boomerang.boomerang_spring_boot.BoomerangApplication'
}

// 개발 시 실행 설정
bootRun {
	jvmArgs = [
			'-Dspring.profiles.active=local',
			'-Dspring.output.ansi.enabled=always'
	]
}

// Gradle Wrapper 버전 설정
wrapper {
	gradleVersion = '8.5'
}
